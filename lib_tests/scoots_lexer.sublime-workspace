{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"cap",
				"capture"
			],
			[
				"ca",
				"capture"
			],
			[
				"current",
				"current_capture"
			],
			[
				"curr",
				"current_capture"
			],
			[
				"int",
				"int_regex_create_node_descriptor"
			],
			[
				"int_regex_ma",
				"int_regex_match_min_max"
			],
			[
				"res",
				"result1"
			],
			[
				"int_regex_match_ze",
				"int_regex_match_zero_one"
			],
			[
				"int_regex_match_z",
				"int_regex_match_one_zero"
			],
			[
				"rege",
				"regex_analyzer"
			],
			[
				"int_regex_mat",
				"int_regex_match_process"
			],
			[
				"par",
				"parent_op"
			],
			[
				"_graph_wa",
				"_graph_walk_init"
			],
			[
				"_graph_wal",
				"_graph_walk_dfs_next"
			],
			[
				"parse",
				"parse_tree"
			],
			[
				"REGEX_ONE",
				"REGEX_ONE_OR_MORE"
			],
			[
				"REGEX_ZERO",
				"REGEX_ZERO_OR_ONE"
			],
			[
				"pares",
				"parse_tree"
			],
			[
				"desc",
				"descriptor"
			],
			[
				"REGEX_CAPTURE",
				"REGEX_CAPTURE_END"
			],
			[
				"parse_",
				"parse_tree"
			],
			[
				"chara",
				"character"
			],
			[
				"paren",
				"parent_node"
			],
			[
				"regex",
				"regex_node_descriptor"
			],
			[
				"char",
				"character"
			],
			[
				"int_graph_remove",
				"int_graph_node_remove_edges"
			],
			[
				"int_graph_mem_delete",
				"int_graph_mem_delete_edges"
			],
			[
				"int_graph_mem_de",
				"int_graph_mem_delete_node"
			],
			[
				"int_graph_mem_cre",
				"int_graph_mem_create_edge"
			],
			[
				"int_graph_mem_crea",
				"int_graph_mem_create_node"
			],
			[
				"int_graph_me",
				"int_graph_mem_add_pool"
			],
			[
				"int_graph_mem_delet",
				"int_graph_mem_delete_edge"
			],
			[
				"int_graph_delete_edge",
				"int_graph_node_delete_edges"
			],
			[
				"graph_mem",
				"graph_mem_pool"
			],
			[
				"memor",
				"memory_pools"
			],
			[
				"int_gra",
				"int_graph_add_pool"
			],
			[
				"graph_mem_",
				"graph_mem_pool"
			],
			[
				"memo",
				"memory_pools"
			],
			[
				"star",
				"start_addr"
			],
			[
				"graph_mem_p",
				"graph_mem_pool_freed"
			],
			[
				"curret",
				"current_node"
			],
			[
				"chil",
				"child_node"
			],
			[
				"chid",
				"child_node"
			],
			[
				"int_grap",
				"int_graph_node_remove_edge"
			],
			[
				"parent",
				"parent_node"
			],
			[
				"pars",
				"parse_tree"
			],
			[
				"paret",
				"parent_node"
			],
			[
				"int_re",
				"int_regex_add_post_esc"
			],
			[
				"_string_po",
				"_string_position_regex_fstring"
			],
			[
				"new_",
				"new_obj2"
			],
			[
				"_json_get_int",
				"_json_get_int_fbytes"
			],
			[
				"_hashmap_re",
				"_hashmap_reset_iterator"
			],
			[
				"_json_ob",
				"_json_object_new"
			],
			[
				"JSON_TYP",
				"JSON_TYPE_FLOAT"
			],
			[
				"int_",
				"int_json_destroy_currrent_data"
			],
			[
				"_hashmap_loo",
				"_hashmap_lookup"
			],
			[
				"cu",
				"current_array"
			],
			[
				"curre",
				"current_char"
			],
			[
				"byte",
				"byte_size"
			],
			[
				"_json_get_type",
				"_json_get_type_fbytes"
			],
			[
				"more",
				"more_exists"
			],
			[
				"JSON_ERR",
				"JSON_ERROR_INVALID_SYNTAX"
			],
			[
				"JSON_END",
				"JSON_END_ARRAY"
			],
			[
				"JSON_ERROR_INVA",
				"JSON_ERROR_INVALID_SYNTAX"
			],
			[
				"json_pa",
				"json_parse_error"
			],
			[
				"_string",
				"_string_pull"
			],
			[
				"var",
				"var_name"
			],
			[
				"allo",
				"allocations"
			],
			[
				"int_js",
				"int_json_parse_object"
			],
			[
				"int_json",
				"_int_json_parse_object_var_type_array"
			],
			[
				"int_json_",
				"int_json_parse_object_var_type_object"
			],
			[
				"json_",
				"json_parse_error"
			],
			[
				"iter",
				"iter_pos"
			],
			[
				"_strin",
				"_string_pull"
			],
			[
				"int_json_parse_object_var_ty",
				"int_json_parse_object_var_type_string"
			],
			[
				"_string_re",
				"_string_iterator_rewind"
			],
			[
				"int_json_parse_object_va",
				"int_json_parse_object_var_type"
			],
			[
				"error",
				"error_code"
			],
			[
				"json_obj",
				"json_obj_parser"
			],
			[
				"_str",
				"_string_append_fchar"
			],
			[
				"sep",
				"separator_found"
			],
			[
				"_string_has",
				"_string_has_next"
			],
			[
				"alloca",
				"allocations"
			],
			[
				"json_ob",
				"json_obj_parser"
			],
			[
				"_string_appe",
				"_string_append_fstring"
			],
			[
				"priorit",
				"priority_queue"
			],
			[
				"ts_",
				"ts_priority_queue"
			],
			[
				"_ts_",
				"_ts_queue_dequeue"
			],
			[
				"pthread_",
				"pthread_mutex_unlock"
			],
			[
				"pthread_mute",
				"pthread_mutex_lock"
			],
			[
				"pthread_mu",
				"pthread_mutex_unlock"
			],
			[
				"prio",
				"priority_queue"
			],
			[
				"ini",
				"initialized"
			],
			[
				"stan",
				"standard_library_context"
			],
			[
				"standard",
				"standard_library_context"
			],
			[
				"DEFAULT",
				"DEFAULT_SERIALIZATION_POOL_SIZE"
			],
			[
				"DEFAULT_S",
				"DEFAULT_SERIALIZATION_POOL_STARTADDR"
			],
			[
				"lib_glo",
				"lib_global_context"
			],
			[
				"heap",
				"heap_management_enabled"
			],
			[
				"stand",
				"standard_library_global"
			],
			[
				"ser_p",
				"ser_pool_start"
			],
			[
				"ser_",
				"ser_pool_start"
			],
			[
				"ser_poo",
				"ser_pool_addr"
			],
			[
				"lib",
				"lib_global_context"
			],
			[
				"hea",
				"heap_management_enabled"
			],
			[
				"int_std",
				"int_std_calloc_bridge"
			],
			[
				"mem",
				"memory_allocator"
			],
			[
				"insta",
				"instance_id"
			],
			[
				"ena",
				"heap_management_enabled"
			],
			[
				"lib_",
				"lib_global_context_ext"
			],
			[
				"utf",
				"utf8_char"
			],
			[
				"trie",
				"trie_map_entry"
			],
			[
				"ins",
				"instance_id"
			],
			[
				"_trie_",
				"_trie_map_lookup_e"
			],
			[
				"_trie_map",
				"_trie_map_delete"
			],
			[
				"entr",
				"entry"
			],
			[
				"chained",
				"chained_trie"
			],
			[
				"_trie",
				"_trie_map_lookup_e"
			],
			[
				"ent",
				"entry"
			],
			[
				"tri",
				"trie_map"
			],
			[
				"trie_map",
				"trie_map_entry"
			],
			[
				"trie_ma",
				"trie_map_entry"
			],
			[
				"trie_",
				"trie_map_entry"
			],
			[
				"int_qui",
				"int_quicksort_vect_partition_asc"
			],
			[
				"int_quic",
				"int_quicksort_swap"
			],
			[
				"int_quicksort_vect",
				"int_quicksort_vect_value"
			],
			[
				"_vector_",
				"_vector_get"
			],
			[
				"_vectr",
				"_vector_get"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/bobby/Development/Scoots/lexer"
	],
	"file_history":
	[
		"/home/bobby/Development/genlibs/src/lib/containers/graph/graph.h",
		"/home/bobby/Development/genlibs/src/lib/format/json/json_parser.c",
		"/home/bobby/Desktop/stest.c",
		"/home/bobby/Development/genlibs/src/lib/containers/list/list.c",
		"/home/bobby/Development/genlibs/src/lib/containers/graph/graph_structs.c",
		"/home/bobby/Development/genlibs/src/lib/regex.h",
		"/home/bobby/Development/genlibs/src/lib/containers/stack/stack.c",
		"/home/bobby/Development/genlibs/src/lib/containers/graph/graph.c",
		"/home/bobby/Development/genlibs/src/lib/format/regex/regex_structs.c",
		"/home/bobby/Development/genlibs/src/lib/format/regex/regex.c",
		"/home/bobby/Development/genlibs/src/lib/genlib.h",
		"/home/bobby/Development/genlibs/src/lib/string.h",
		"/home/bobby/Development/genlibs/src/lib/format/regexp/regex.h",
		"/home/bobby/Development/genlibs/src/lib/types/string/string_structs.c",
		"/home/bobby/Development/genlibs/src/lib/containers/heap/binary_heap.c",
		"/home/bobby/Development/genlibs/src/lib/containers/list/vector.c",
		"/home/bobby/Development/genlibs/src/lib/algorithms/st_merge_sort.c",
		"/home/bobby/Development/genlibs/src/lib/algorithms/st_quick_sort.c",
		"/home/bobby/Development/genlibs/src/lib/containers/map/hashmap.c",
		"/home/bobby/Development/genlibs/src/lib/containers/queue/priority_queue.c",
		"/home/bobby/Development/genlibs/src/lib/containers/queue/queue.c",
		"/home/bobby/Development/genlibs/src/lib/containers/queue/ts_priority_queue.c",
		"/home/bobby/Development/genlibs/src/lib/containers/queue/ts_queue.c",
		"/home/bobby/Development/genlibs/src/lib/containers/set/vset.c",
		"/home/bobby/Development/genlibs/src/lib/containers/tree/avl_tree.c",
		"/home/bobby/Development/genlibs/src/lib/containers/tree/bst.c",
		"/home/bobby/Development/genlibs/src/lib/containers/trie/trie_map.c",
		"/home/bobby/Development/genlibs/src/lib/format/json/json_array.c",
		"/home/bobby/Development/genlibs/src/lib/format/json/json_object.c",
		"/home/bobby/Development/genlibs/src/lib/thread_enhanced/algorithms/th_merge_sort.c",
		"/home/bobby/Development/genlibs/src/lib/types/string/string.c",
		"/home/bobby/Development/genlibs/src/lib/types/string/string.h",
		"/home/bobby/Development/genlibs/src/lib_tests/gt_out.c",
		"/home/bobby/Development/genlibs/src/lib_tests/json.c",
		"/home/bobby/Development/genlibs/src/lib_tests/json_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/preprocessed.c",
		"/home/bobby/Development/genlibs/src/lib_tests/string_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/trie_map_test.c",
		"/home/bobby/Development/genlibs/src/lib/types/string/string_regex.c",
		"/home/bobby/Desktop/lexer.c",
		"/home/bobby/Development/genlibs/src/lib/mem/memory.c",
		"/home/bobby/Development/Scoots/Scoots/Scoots_Kit/include/genlibs/genlib.h",
		"/home/bobby/Development/genlibs/src/lib/containers/map/map.c",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/www/html/js/validate.js",
		"/home/bobby/Development/genlibs/src/lib/format/json/json_structs.c",
		"/home/bobby/Development/genlibs/src/lib/format/json/json.h",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/www/apcnct/app_platform_1/js/dash/dash.js",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/www/apcnct/app_platform_1/php/DB/database.php",
		"/home/bobby/Downloads/index (4).html",
		"/home/bobby/Development/genlibs/src/lib_tests/v_test2.c",
		"/home/bobby/Desktop/m_test.c",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/www/apcnct/app_platform_1/js/people/peopleManager.js",
		"/home/bobby/Development/genlibs/src/lib/containers/queue/queue_structs.c",
		"/home/bobby/Development/genlibs/src/lib/containers/set/set.c",
		"/home/bobby/Desktop/pointer_test.c",
		"/home/bobby/Development/genlibs/src/lib/hashmap.h",
		"/home/bobby/Development/genlibs/src/lib/json.h",
		"/home/bobby/Development/genlibs/src/lib/foundation.h",
		"/home/bobby/Development/genlibs/src/lib/graph.h",
		"/home/bobby/Development/genlibs/src/lib/map.h",
		"/home/bobby/Development/genlibs/src/lib/object_set.h",
		"/home/bobby/Development/genlibs/src/lib/priority_queue.h",
		"/home/bobby/Development/genlibs/src/lib/stack.h",
		"/home/bobby/Development/genlibs/src/lib/trie.h",
		"/home/bobby/Development/genlibs/src/lib/utf8.h",
		"/home/bobby/Development/genlibs/src/lib/queue.h",
		"/home/bobby/Development/genlibs/src/lib/algorithms.h",
		"/home/bobby/Development/genlibs/src/lib/avl_tree.h",
		"/home/bobby/Development/genlibs/src/lib/list.h",
		"/home/bobby/Development/genlibs/src/lib/weighted_graph.h",
		"/home/bobby/Development/genlibs/src/lib/vector.h",
		"/home/bobby/Development/genlibs/src/lib/binary_heap.h",
		"/home/bobby/Development/genlibs/src/lib/set.h",
		"/home/bobby/Development/genlibs/src/lib/binary_search_tree.h",
		"/home/bobby/Development/genlibs/src/lib_tests/list_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/hashmap_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/graph_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/priority_queue_test.c",
		"/home/bobby/Development/genlibs/src/lib/containers/stack/stack.h",
		"/home/bobby/Development/genlibs/src/lib/mem_glibc.h",
		"/home/bobby/Development/genlibs/src/lib/mem/mem_glibc.c",
		"/home/bobby/Development/genlibs/src/lib/global/std_lib_env.c",
		"/home/bobby/Development/genlibs/src/lib_tests/map_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/mergesort_test.c",
		"/home/bobby/Development/genlibs/src/lib/global/environment.h",
		"/home/bobby/Development/genlibs/src/lib/sys_include.h",
		"/home/bobby/Development/genlibs/src/lib/containers/set/set.h",
		"/home/bobby/Development/genlibs/src/lib/containers/tree/bst.h",
		"/home/bobby/Development/genlibs/src/lib/containers/tree/avl_tree.h",
		"/home/bobby/Development/genlibs/src/lib/containers/trie/trie_map.h",
		"/home/bobby/Development/genlibs/src/lib/containers/queue/queue.h",
		"/home/bobby/Development/genlibs/src/lib_tests/queue_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/quick_sort_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/quicksort_test.c",
		"/home/bobby/Development/genlibs/src/lib/containers/queue/priority_queue.h",
		"/home/bobby/Development/genlibs/src/lib/types/utf8/utf8_structs.c",
		"/home/bobby/Development/genlibs/src/lib/containers/trie/trie_structs.c",
		"/home/bobby/Development/genlibs/src/lib/types/utf8/utf8.h",
		"/home/bobby/Development/genlibs/src/lib/config/config.h",
		"/home/bobby/Development/genlibs/src/lib_tests/mem_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/avl_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/binary_heap_test.c",
		"/home/bobby/Development/genlibs/src/lib_tests/bst_test.c",
		"/home/bobby/Development/genlibs/src/lib/containers/tree/bst_structs.c",
		"/home/bobby/Development/genlibs/src/lib/containers/stack/stack_structs.c",
		"/home/bobby/Development/genlibs/src/lib/containers/set/set_structs.c",
		"/home/bobby/Development/genlibs/src/lib/containers/map/hashmap.h",
		"/home/bobby/Development/genlibs/src/lib/containers/map/map.h",
		"/home/bobby/Development/genlibs/src/lib/containers/map/map_structs.c",
		"/home/bobby/Development/genlibs/src/lib/containers/list/vector.h",
		"/home/bobby/Development/genlibs/src/lib/containers/list/list.h",
		"/home/bobby/Development/genlibs/src/lib/sys/win_posix/ph.txt",
		"/home/bobby/Development/genlibs/src/lib/containers/list/vector_structs.c",
		"/home/bobby/Development/genlibs/src/lib/containers/list/list_structs.c",
		"/home/bobby/Development/genlibs/src/lib/containers/heap/binary_heap.h",
		"/home/bobby/Development/genlibs/src/lib/containers/heap/binary_heap_structs.c",
		"/home/bobby/Development/genlibs/src/lib/algorithms/algorithms.h",
		"/home/bobby/Development/genlibs/src/lib/containers/graph/weighted_graph.h",
		"/home/bobby/Development/genlibs/src/lib/containers/graph/weighted_graph.c",
		"/home/bobby/Development/genlibs/src/lib/algorithms/sort_structs.c",
		"/home/bobby/Development/genlibs/src/lib/types/utf8/utf8.c",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/etc/apache2/sites-available/000-default.conf",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/etc/apache2/sites-enabled/000-default.conf",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/www/apcnct/app_platform_1/php/ilid/ilidManager.php",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/www/apcnct/app_platform_1/php/header.h.php",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/etc/php5/apache2/php.ini",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/www/apcnct/app_platform_1/php/router.php",
		"/run/user/1000/gvfs/sftp:host=162.209.1.145/root/www/apcnct/app_platform_1/php/activeMem.php"
	],
	"find":
	{
		"height": 22.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<project>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"REGEX_NOT",
			"_bracket",
			"_list_add",
			"int_regex_capture_op",
			"printf",
			"match_zero_one",
			"regex_node_descriptor",
			"->max",
			"->min",
			"regex_node_descriptor",
			"_graph_reset_iter",
			"parent = ",
			"printf",
			"regex_object",
			"remove_edge",
			"int_graph_node_delete_edges",
			"int_graph_node_remove_edge",
			"int_graph_node_delete_edge(",
			"int_graph_node_delete_edges",
			"printf",
			"int_graph_node_remove_edge",
			"PARENT",
			"int_graph_node_remove_edge",
			"_graph_walk_dfs",
			"printf",
			"pringt",
			"_graph_delete_edge",
			"inline",
			"int_json_parse_var_type_string",
			"_graph_add_edge",
			"resize",
			"int_regex_create_node_descriptor",
			"current_node",
			"int_graph_node_remove_edge",
			"graph_walk",
			"a+",
			"destr",
			"destroy\\(([A-Za-z0-9\\-_>]*)([ ]*),([ ]*)([A-Za-z0-9\\-_>]*)([ ]*)\\)",
			"destroy\\(([A-Za-z0-9\\-_]+)\\)",
			"destroy\\(([A-Za-z0-9\\-_]+)([ ]*),([ ]*)([A-Za-z0-9\\-_]+)\\)",
			"destroy",
			"&ctx",
			"int_json_destroy",
			", obj->del_objects",
			"_json_object_delete",
			"copy",
			"get_int_fbytes",
			"ctx_delete",
			"get_next_e",
			"destroy",
			"destroy\\((.+),([ ]*)\\(void\\*\\*\\)\\&(.+)",
			"sizeof(item)",
			"destroy",
			"destroy\\((.+),([ ]*)([A-Za-z]+)",
			"destroy\\((.+),([ ]*)([&])",
			"destroy\\((.+),([ ]*)",
			"destroy\\((.+),([ ]*)(\\&[A-Ba-b]+)",
			"destroy\\((.+),([ ]*)(&[A-Ba-b]+)",
			"destroy",
			"destroy\\((.+),([ ]*)([A-Za-z]+)",
			"destroy\\((.+),([ ]*)([A-Za-z])",
			"destroy\\((.+),([ ]*)([A-Ba-b]+)",
			"destroy",
			"destroy\\((.+),([ ]*)([A-Ba-b]+)",
			"destroy\\((.+),([ ]*)([A-B]+)",
			"destroy\\((.+),([ ]*)([A-B]*)",
			"destroy\\((.+),([ ]*)([A-Ba-b]+)",
			"destroy\\((.*),([ ]*)([A-Za-z]+)",
			"destroy\\((.*),([ ]*)([A-Z,a-z]*)",
			"destroy\\((.*),",
			"destroy\\(",
			"destroy\\(\\$\\1(*),",
			"destroy\\((*),",
			"dest",
			"destroy(",
			"destroy((*),",
			"destroy(",
			"destroy(*,",
			"sizeof(item)",
			"_json_array",
			"int_json_de",
			"array_remove",
			"alloc",
			"JSON_STRING",
			"iterator",
			"JSON_NAME_",
			"has_next",
			"map_has_next",
			"iterator",
			"int_retrieve_item",
			"copy",
			"JSON_ERROR;",
			"append",
			"scalar",
			"printf",
			"int_json_parse_check_more",
			"error))",
			"\"",
			"string_pull",
			"int_json_parse_object(",
			"int_json_parse(",
			"int_json_parse",
			"int_json_parse_object",
			"var_type",
			"check_more",
			"case_ins",
			"list_add",
			"&ctx",
			"lib_global_context.",
			"lib_global_context",
			"printf",
			"calloc",
			"mem_glibc",
			"st",
			"enableCount",
			"geoRecord",
			"op",
			"opache",
			"employee",
			"_log",
			"_lob",
			"merges",
			"mergest",
			"merges++",
			"int_graph_node_remove_edge",
			"size_t",
			"_list_set",
			"levels, 0, sorter"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"regex_token",
			"->end",
			"->start",
			"regex_token",
			"regex_compiled",
			"//_graph_delete_edge",
			"//_graph_add_edge",
			"parent_node",
			"destroy($1, $4)",
			"destroy($1, $2)",
			"ctx",
			"destroy($1, $2$3",
			"destroy($1, $2",
			"_delete($1, $2$3",
			"sizeof(json_item)",
			"destroy($1,$2(void**)&$3",
			"destroy($1,$2(void**)$3",
			"destroy($1,$2&$3",
			"destroy($1, &",
			"destroy($1,",
			"destroya",
			"destroyer(",
			"destroy($1, &",
			"",
			"sizeof(json_item)",
			"int_json_retrieve_item",
			"JSON_UNDEFINED;",
			"\\\"",
			"int_json_parse_object(",
			"int_json_parse_object",
			"int_json_parse",
			"ctx",
			"lib_global_context->",
			"levels, 0, 0, sorter",
			"long",
			"sizeof",
			"->key",
			"int_utf8",
			"ilapp_inventory_item.id",
			"_queue_dequeue",
			"_queue_enqueue",
			"heap_entry",
			"_graph",
			"binary_heap_entry",
			"byte*",
			"$this->getUniValue(\"",
			"getSetUniValue",
			"$db",
			"$",
			"$GLOBALS['session']",
			"$GLOBALS['userItemManager']",
			"$GLOBALS['session']",
			"new itemManager",
			"$userItemManager",
			"new userItemManager",
			"userItemManager(",
			"setCurrentItem(",
			"this->uid",
			"this.",
			"$this->",
			"scanner",
			"dashboard",
			"*size",
			"*dec",
			"*size",
			"64",
			"decl_parse_decPos",
			"decl_parse_cont",
			"decl_parse_size",
			"decl_parse_size ",
			" decl_parse_size ",
			"decl_parse_globalBuffer",
			"declMst",
			"s1.c_str()",
			"bstItem<T>*",
			"enum{ value = 0}",
			"enum{ value = 1}",
			"hashItem<T>",
			")",
			" )",
			" ",
			"300",
			"500",
			"bitmap",
			"object",
			"object->",
			"utf8*",
			"utf8&",
			"object->",
			"object.data[",
			"put(",
			"(const char* name",
			"uShortList",
			"_malloc",
			"malloc",
			", &type);",
			".get",
			"last",
			"addLast",
			".get",
			"//std::cout",
			"remove",
			"->lh",
			"->rh",
			"return 0",
			"nptr",
			"mountPoint",
			"xspace = 256",
			"xspace = 0",
			"xspace = 1",
			"xspace = 64"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 28.0
	},
	"pinned_build_system": "",
	"project": "scoots_lexer.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"lib/format/json/json_object.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 226.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
